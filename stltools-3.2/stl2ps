#! /usr/bin/env python2
# vim:fileencoding=utf-8
#
# Copyright © 2012-2014 R.F. Smith <rsmith@xs4all.nl>. All rights reserved.
# $Date: 2014-06-15 17:12:40 +0200 $
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

'''Program for converting a view of an STL file into a PDF file.'''

from __future__ import print_function, division
import sys
import time
import numpy as np
from stltools import stl, bbox, utils, vecops, matrix

__version__ = '$Revision: 3.2 $'[11:-2]


def usage():
    print("Usage: stl2ps infile [outfile] [transform [transform ...]]")
    print("where [transform] is [x number|y number|z number]")


def main(args):
    """Main program.

    :argv: command line arguments (without program name!)
    """
    msg = utils.Msg()
    canvas_size = 200
    infile, outfile, tr = utils.processargs(args, '.eps', usage)
    msg.say('Reading STL file')
    try:
        vertices, _ = stl.readstl(infile)
    except ValueError as e:
        print((infile + ':', e))
        sys.exit(1)
    origbb = bbox.makebb(vertices)
    msg.say('Calculating normal vectors')
    facets = vertices.reshape((-1, 3, 3))
    normals = np.array([vecops.normal(a, b, c) for a, b, c in facets])
    msg.say('Apply transformations to world coordinates')
    vertices = vecops.xform(tr, vertices)
    normals = vecops.xform(tr[0:3, 0:3], normals)
    msg.say('Making model-view matrix')
    minx, maxx, miny, maxy, _, maxz = bbox.makebb(vertices)
    width = maxx - minx
    height = maxy - miny
    dx = -(minx + maxx)/2
    dy = -(miny + maxy)/2
    dz = -maxz
    m = matrix.trans([dx, dy, dz])
    sf = min(canvas_size/width, canvas_size/height)
    v = matrix.scale(sf, sf)
    v[0, 3], v[1, 3] = canvas_size/2, canvas_size/2
    mv = matrix.concat(m, v)
    msg.say('Transforming to view space')
    vertices = vecops.xform(mv, vertices)
    facets = vertices.reshape((-1, 3, 3))
    # In the ortho projection on the z=0 plane, z+ is _towards_ the viewer
    msg.say('Determine visible facets')
    vf = [(f, n, 0.4*n[2]+0.5) for f, n in zip(facets, normals) if n[2] > 0]
    msg.say('{:.2f}% of facets is visible'.format(100*len(vf)/len(facets)))
    # Next, depth-sort the facets using the largest z-value of the
    # three vertices.
    msg.say('Depth-sorting visible facets')

    def fkey(t):
        (a, b, c), _, _ = t
        return max(a[2], b[2], c[2])

    vf.sort(None, fkey)
    minx, maxx, miny, maxy, _, maxz = bbox.makebb(vertices)
    msg.say('Creating PostScript header')
    s1 = "% The scale factor used is: {:.2f} PostScript points/STL-unit"
    s2 = "% This becomes a picture of {:.0f}×{:.0f} PostScript points;"\
         " {:.0f}×{:.0f} mm."
    cs = "%   {:.2f} ≤ {} ≤ {:.2f}"
    lines = ["%!PS-Adobe-1.0",
             "%%BoundingBox: 0 0 {:.0f} {:.0f}".format(maxx, maxy),
             "% Generated by stl2ps {}".format(__version__),
             "% on {}.".format(time.asctime()),
             "% Bounding box (STL units)",
             cs.format(origbb[0], 'x', origbb[1]),
             cs.format(origbb[2], 'y', origbb[3]),
             cs.format(origbb[4], 'z', origbb[5]),
             s1.format(sf),
             s2.format(maxx, maxy, maxx/72*25.4, maxy/72*25.4),
             "% {} of {} facets are visible.".format(len(vf), len(facets))
             ]
    # PostScript settings and macros.
    lines += ["% Settings",
              ".5 setlinewidth", ".5 setlinewidth",
              "% Defining drawing commands",
              "/g {setgray} def",
              "/f {moveto} def", "/s {lineto} def",
              "/t {lineto closepath gsave fill grestore stroke} def",
              "% Start drawing"]
    s3 = "{:4.2f} g {:.3f} {:.3f} f {:.3f} {:.3f} s {:.3f} {:.3f} t"
    msg.say('Rendering triangles')
    lines += [s3.format(i, a[0], a[1], b[0], b[1], c[0], c[1])
              for (a, b, c), z, i in vf]
    lines += ["showpage", '%%EOF']
    outs = '\n'.join(lines)
    try:
        with open(outfile, "w+") as outf:
            msg.say('Writing output file "{}"'.format(outfile))
            outf.write(outs)
            msg.say('Done')
    except:
        msg.say('Error: Cannot write output file "{}"'.format())


if __name__ == '__main__':
    main(sys.argv[1:])
